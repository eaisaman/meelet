<%
function _isEmpty(obj) {
    if (obj == null) return true;
    for (var key in obj) if (hasOwnProperty.call(obj, key)) return false;
    return true;
}

function _keys(obj) {
    if (Object.keys) return Object.keys(obj);
    var keys = [];
    for (var key in obj) if (hasOwnProperty.call(obj, key)) keys.push(key);
    return keys;
}

function printJSON(obj) {
    if (toString.call(obj) === '[object Object]') {
        var objKeys = _keys(obj);
%>
{<%     for (var i = 0;i < objKeys.length;i++) {
            var value = obj[objKeys[i]];
%>'<%= objKeys[i] %>':<%printJSON(value);%><%= i<objKeys.length-1?",":"" %><%
        }
%>}<%
    } else if (toString.call(obj) === '[object Array]') {
%>[<%
        for (var i = 0;i < obj.length;i++) {
            printJSON(obj[i]);%><%= i<obj.length-1?",":"" %><%
        }
%>]<%
    } else if (typeof obj === "string") {
%>"<%= obj.replace(/"/g, "\\\"") %>"<%
    } else {
%><%= obj %><%
    }
}

function handleTransition(widgetId, transition) {
%>
function() { return utilService.registerTrigger('<%= widgetId %>', <%printJSON(transition);%>); }
<%
}

function handleStateAction(stateAction) {
%>
function() { return utilService.handleStateAction(<%printJSON(stateAction);%>); }
<%
}

function handleStateTree(id, stateTree) {
    if (!_isEmpty(stateTree)) {
        var context = stateTree._context, stateNames = _keys(stateTree).filter(function(n) {return n !== "_context"}), childHandlers = [];
%>
$rootScope.stateFns.push(function() {
var self = this;
self["<%=id%>"] = self["<%=id%>"] || {};
self["<%=id%>"].set<%=context||"State"%> = function(name) {
<%if (context) {%>
    self["<%=id%>"].setState = self["<%=id%>"].set<%=context%>;
<%}%>
    utilService.setStateOnWidget("<%=id%>", name);
    switch (name) {<%
        for(var i = 0;i < stateNames.length;i++) {
            var name = stateNames[i], value = stateTree[name], transition = value.transition, stateAction = value.stateAction, offspring = value.offspring;%>
        case "<%=name%>":
            var arr = [];<%
            if (!_isEmpty(stateAction)) {%>
            arr.push(<%
                handleStateAction(stateAction);%>);<%
            }
            if (!_isEmpty(transition)) {%>
            arr.push(<%
                handleTransition(id, transition);%>);<%
            }
            if (!_isEmpty(offspring)) {%>
            arr.push(function() { return $timeout(function() {<%
                var childIds = _keys(offspring);
                childIds.forEach(function(childId) {
                    var childStateTree = offspring[childId];
                    childHandlers.push(function() {handleStateTree(childId, childStateTree)});
                    %>
            arr.push(function() { return self["<%=childId%>"].set<%=childStateTree._context%>("*"); })
<%
                });%>}); });<%
            }%>
            return arr.length && uiUtilService.chain(arr, "chain-stateFn-<%=id%>") || uiUtilService.getResolveDefer();
        break;
        default:
            return uiUtilService.getResolveDefer();<%
        }
     %>
    }
}
});
<%
    childHandlers.forEach(function(handler) {handler()});
    }
}

function handleEventMap(eventMap) {
    var eventKeys = _keys(eventMap);

    if (eventKeys.length) {
%>$q.all([<%
    for(var i = 0;i < eventKeys.length;i++) {
        var value = eventMap[eventKeys[i]];
        handleTransition(value.widgetId, value.transition);
        if (!_isEmpty(value.offspring)) {
%>.then(
<%
            handleEventMap(value.offspring);
%>)<%
        }
%><%= i<eventKeys.length-1?",":"" %><%
    }
%>])<%
    }
}%>

define(
    ["angular", "jquery", "jquery-ui", "app-route", "app-service"],
    function () {
        return function (appModule, meta) {
            function RootController($scope, $rootScope, $q, $timeout, appService, urlService, utilService, uiUtilService) {
                $rootScope.initFns = [];
                $rootScope.stateFns = [];
<%if (pages && pages.length) {
    pages.forEach(function(page) {%>
                $rootScope.initFns.push(function() { this['<%= page.id %>'] = {}; });
<%
        if (page.initMap) {
            for(var widgetId in page.initMap) {
%>
                $rootScope.initFns.push(function() {
                    this['<%= widgetId %>'] = {};
<%for(var key in page.initMap[widgetId]) {%>
                    this['<%= widgetId %>']['<%= key %>'] = <%=page.initMap[widgetId][key]%>;
<%}%>
                });
<%
            }
        }

        handleStateTree(page.id, page.stateTree);
    });
}%>
                $rootScope.initFns.forEach(function(fn) {fn.apply($rootScope)});

                $rootScope.stateFns.forEach(function(fn) {fn.apply($rootScope)});

                $rootScope.pickedPage = meta.locations[0];
                $scope.nextPage = function(event) {
                    event && event.stopPropagation();
                    utilService.nextPage($rootScope.pickedPage);
                }
                $scope.prevPage = function(event) {
                    event && event.stopPropagation();
                    utilService.prevPage($rootScope.pickedPage);
                }
                $scope.exitPage = function(event) {
                    event && event.stopPropagation();
                    appService.exitPage();
                }
                utilService.loadPage(null, $rootScope.pickedPage, true);
            }
<%if (pages && pages.length) {
    pages.forEach(function(page) {
%>
            function <%= page.id %>_Controller($scope, $rootScope, $q, $timeout, appService, urlService, utilService, uiUtilService) {
                utilService.setState("<%= page.id %>", "*");
            }
<%
    });
}%>

            if (isBrowser) {
                appModule.
                    controller('RootController', ["$scope", "$rootScope", "$q", "$timeout", "appService", "urlService", "utilService", "uiUtilService", RootController]);
<%if (pages && pages.length) {
    pages.forEach(function(page) {
%>
                appModule.
                    controller('<%= page.id %>_Controller', ["$scope", "$rootScope", "$q", "$timeout", "appService", "urlService", "utilService", "uiUtilService", <%= page.id %>_Controller]);
<%
    });
%>
<%}%>
            }
        }
    }
);